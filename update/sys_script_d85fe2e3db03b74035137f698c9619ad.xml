<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_wms_pulse_dev_request</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_wms_pulse_dev_request">state=51^parentISNOTEMPTY^EQ<item display_value="Scheduled" endquery="false" field="state" goto="false" newquery="false" operator="=" or="false" value="51"/>
            <item endquery="false" field="parent" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Display Messages</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	var checked = [];
	// If the dev request is scheduled to go to prod, but the parent is either not scheduled or scheduled to after the child, display a message saying that it will not be deployed with current configuration
	var scheduledTime = new GlideDateTime();
	scheduledTime.setValue(current.due_date);
	var currentParent = current.parent;
	while (currentParent) {
		if (checked.indexOf(currentParent.sys_id + '') > -1) {
			gs.addErrorMessage('Circular reference found! [' + currentParent.number + ']');
			break;
		}
		checked.push(currentParent.sys_id + '');
		if (currentParent.state != DevRequestStates.SCHEDULED) {
			if (currentParent.state != DevRequestStates.AWAITING_PARENT) {
				gs.addErrorMessage('The parent of this request (' + currentParent.number + ') is not scheduled. The state is [' + currentParent.state.getDisplayValue() + ']');
			}
		} else {
			var parentTime = new GlideDateTime();
			parentTime.setValue(currentParent.due_date);
			if (scheduledTime < parentTime) {
				gs.addErrorMessage('The parent of this request (' + currentParent.number + ') is scheduled to later than this request [' + parentTime.getDisplayValue() + ']');
			}
		}
		currentParent = currentParent.parent;
	}
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>mmoreli</sys_created_by>
        <sys_created_on>2019-08-10 03:43:15</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d85fe2e3db03b74035137f698c9619ad</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>Display Messages</sys_name>
        <sys_overrides/>
        <sys_package display_value="Pulse" source="x_wms_pulse">e970e883db6bdb0c1f0d322b7c9619a2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Pulse">e970e883db6bdb0c1f0d322b7c9619a2</sys_scope>
        <sys_update_name>sys_script_d85fe2e3db03b74035137f698c9619ad</sys_update_name>
        <sys_updated_by>mmoreli</sys_updated_by>
        <sys_updated_on>2019-08-10 04:47:08</sys_updated_on>
        <template/>
        <when>before_display</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=d85fe2e3db03b74035137f698c9619ad"/>
</record_update>
