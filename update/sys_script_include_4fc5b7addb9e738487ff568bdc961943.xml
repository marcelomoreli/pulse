<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_wms_pulse.RefQualsPulse</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>RefQualsPulse</name>
        <script><![CDATA[var RefQualsPulse = Class.create();
RefQualsPulse.prototype = {
    initialize: function() {
    },
	
	getApplicationsForScope: function(scope) {
		if (!scope || scope == '') {
			return;
		}
		var answer = 'sys_id=none';
		var appScope = new GlideRecord('x_wms_pulse_m2m_sn_app_scope');
		appScope.addQuery('sn_scope', scope);
		appScope.query();
		while (appScope.next()) {
			if (answer == 'sys_id=none') {
				answer = 'sys_idIN';
			} else {
				answer += ',';
			}
			answer += appScope.getValue('sn_application');
		}
		return answer;
	},
	
	getScopesForApplication: function(application) {
		if (!application || application == '') {
			return;
		}
		var answer = 'sys_id=none';
		var appScope = new GlideRecord('x_wms_pulse_m2m_sn_app_scope');
		appScope.addQuery('sn_application', application);
		appScope.query();
		while (appScope.next()) {
			if (answer == 'sys_id=none') {
				answer = 'sys_idIN';
			} else {
				answer += ',';
			}
			answer += appScope.getValue('sn_scope');
		}
		return answer;
	},
	
	getDevsForApplication: function(application) {
		var answer = 'type=dev';
		if (!application || application == '') {
			return answer;
		}
		var appInstance = new GlideRecord('x_wms_pulse_m2m_sn_app_instance');
		appInstance.addQuery('sn_application', application);
		appInstance.addQuery('sn_instance.type', 'dev');
		appInstance.query();
		while (appInstance.next()) {
			if (answer == 'type=dev') {
				answer = 'sys_idIN';
			} else {
				answer += ',';
			}
			answer += appInstance.getValue('sn_instance');
		}
		return answer;
	},
	
    // Gets everything ready to go to Prod
    getScheduledDevelopments: function(parent, deepness) {
        if (!deepness) {
            deepness = 1;
        } else {
            deepness++;
        }
        if (deepness > 200) {
            return '';
        }
        var devReqs = new GlideRecord('x_wms_pulse_dev_request');
        if (parent) {
            devReqs.addQuery('parent', parent);
            devReqs.addQuery('state', DevRequestStates.AWAITING_PARENT);
        } else {
            devReqs.addQuery('state', DevRequestStates.SCHEDULED);
        }
        devReqs.query();
        if (!devReqs.hasNext()) {
            return deepness == 1 ? 'NOT FOUND' : '';
        }
        var devs = '';
        while (devReqs.next()) {
            if (devs != '') {
                devs += ',';
            }
            devs += devReqs.sys_id;
            var children = this.getScheduledDevelopments(devReqs.sys_id + '', deepness);
            if (children != '') {
                devs += ',' + children;
            }
        }
        return devs != '' ? devs : 'NOT FOUND';
    },

    type: 'RefQualsPulse'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>mmoreli</sys_created_by>
        <sys_created_on>2019-06-27 20:56:53</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>4fc5b7addb9e738487ff568bdc961943</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>RefQualsPulse</sys_name>
        <sys_package display_value="Pulse" source="x_wms_pulse">e970e883db6bdb0c1f0d322b7c9619a2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Pulse">e970e883db6bdb0c1f0d322b7c9619a2</sys_scope>
        <sys_update_name>sys_script_include_4fc5b7addb9e738487ff568bdc961943</sys_update_name>
        <sys_updated_by>mmoreli</sys_updated_by>
        <sys_updated_on>2019-08-09 18:46:05</sys_updated_on>
    </sys_script_include>
</record_update>
